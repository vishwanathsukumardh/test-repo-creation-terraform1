// Jenkinsfile autogenerated from the template.
// WARNING: Do not edit this file manually, all the changes will be
//          overwritten by automation.

/******************************************************
 Version: 2.1.0
*******************************************************/

@Library('shared-library@1.3.3')

import disco.deploy.deployment

def deployment = new deployment()

pipeline {
  options {
    ansiColor('xterm')
  }

  environment { 
    registryHost    = "eu.gcr.io"
    registryProject = "dhh-search-discovery-ops"
    buildUser       = ""
    SlackMessage    = ""
  }

  parameters {
    string(
        name: 'GoogleProjectName',
        defaultValue: '',
        description: '[Optional] If empty, a selection of available Google Projects is called up during the build'
    )
    string(
        name: 'Cluster',
        defaultValue: '',
        description: '[Optional] If empty, a selection of available Clusters is called up during the build'
    )
    string(
        name: 'HelmChartName',
        defaultValue: '',
        description: '[Optional] If empty, a selection of available Helm Charts is called up during the build'
    )
    string(
        name: 'HelmChartVersion',
        defaultValue: '',
        description: '[Optional] If empty, the latest Helm Chart version will be used'
    )
    string(
        name: 'HelmRepository',
        defaultValue: '',
        description: '[Optional] If empty, Disco Helm repository (disco-helm-charts.dh-discovery-live.net) will be used'
    )
    string(
        name: 'DeployUseCases',
        defaultValue: '',
        description: '[Optional] Comma-separated list of deployments. If empty, a selection of available alternative Deployments is called up during the build'
    )
    string(
        name: 'DockerImageName',
        defaultValue: '',
        description: '[Optional] Required only for dhh-search-discovery-live/stg and if HelmChartName != DockerImageName. If empty, a selection of available Docker Images is called up during the build'
    )    
    string(
        name: 'DockerImageTag',
        defaultValue: '',
        description: '[Optional] If empty, a selection of available Image Tags is called up during the build'
    )
    string(
        name: 'SlackChannel',
        defaultValue: '',
        description: '[Mandatory] If empty, the pipeline will fail'
    )
    extendedChoice(
        name: 'RecreatePods',
        defaultValue: '',
        type: 'PT_CHECKBOX',
        value: 'Yes',
        description: 'Enables "--recreate-pods" !WARNING! This may cause a downtime if checked. All pods will be deleted at once'
    )
  }
  agent any

  stages { 
    stage ('Select Cluster and Image') {
      steps {
        script {
          if (params.SlackChannel.isEmpty()) {
            error("The parameter \"SlackChannel\" was not set...")
          }
          deployment.initializeHelm()
          if (params.HelmRepository.isEmpty()) {
            HelmRepository = "dh-disco-helm-charts"
          }
          timeout(time: 300, unit: 'SECONDS') {
            if (params.GoogleProjectName.isEmpty()) {
              GoogleProjectName = input(
                id: 'userInput',
                message: 'Choose Google Project',
                parameters: [
                  [$class: 'ChoiceParameterDefinition',
                    choices: deployment.getGoogleProjectName(),
                    description: "Please select Google Project",
                    name: 'GoogleProjectName'
                  ]
                ]
              )
            }
            if (params.Cluster.isEmpty()) {
              Cluster = input(
                id: 'userInput',
                message: "Choose Cluster in GCP \"${GoogleProjectName}\"",
                parameters: [
                  [$class: 'ChoiceParameterDefinition',
                    choices: deployment.getClusters(GoogleProjectName),
                    description: "Please select cluster",
                    name: 'Cluster'
                  ]
                ]
              )
            }
            if (params.HelmChartName.isEmpty()) {
              HelmChartName = input(id: 'userInput',
                message: 'Choose Helm chart',
                parameters: [
                  [$class: 'ChoiceParameterDefinition',
                    choices: deployment.getChartName(HelmRepository),
                    description: "Please select a Helm chart",
                    name: 'HelmChartName'
                  ]
                ]
              )
            }
            def UseCaseList = deployment.getDeploymentList(GoogleProjectName, Cluster, HelmChartName)
            if (params.DeployUseCases.isEmpty()) {
              if (UseCaseList.split(',').size() > 1) {
                DeployUseCases = input message: "Use-Cases for \"${HelmChartName}\" for cluster \"${Cluster}\" in GCP \"${GoogleProjectName}\"",
                  parameters: [extendedChoice(
                    name: "UseCases",
                    defaultValue: UseCaseList,
                    multiSelectDelimiter: ',',
                    type: 'PT_CHECKBOX',
                    value: UseCaseList,
                    visibleItemCount: 50
                  )]
              } else {
                DeployUseCases = UseCaseList
              }
              if (DeployUseCases.isEmpty()) {
                println "You have to check at least one use case."
                sh "exit 1"
              }
            }
            if (params.DockerImageName.isEmpty()) {
              if ( (GoogleProjectName == "dhh-search-discovery-live" ) || (GoogleProjectName == "dhh-search-discovery-stg") ) {
                def imageList = deployment.getDockerImageList()
                if (imageList.contains(HelmChartName)) { 
                  DockerImageName = HelmChartName
                } else {
                  DockerImageName = input(id: 'userInput',
                    message: "Docker Image for \"${HelmChartName}\" not found. Please choose one from list below:",
                    parameters: [
                      [$class: 'ChoiceParameterDefinition',
                        choices: imageList,
                        description: "Please select an Docker image name",
                        name: 'DockerImage'
                      ]
                    ]
                  )
                }
              }
            }            
            if (params.DockerImageTag.isEmpty()) {
              DockerImageTag = input(
                id: 'userInput',
                message: "Choose Image Tag for \"${HelmChartName}\"",
                parameters: [
                  [$class: 'ChoiceParameterDefinition',
                    choices: deployment.getDockerImageTagList(DockerImageName),
                    description: "Please select image tag for \"${HelmChartName}\"",
                    name: 'DockerImageTag'
                  ]
                ]
              )
            }
            if (params.RecreatePods.equals("Yes")) {
              RecreatePods = "--recreate-pods "
            }         
          }
        }
      }
    }
    stage ('Deploy Application') {
      steps {
        script {
          wrap([$class: 'BuildUser']) {
            if (!env.BUILD_USER) {
              def triggeredBy  = currentBuild.rawBuild.getCause(hudson.model.Cause$UpstreamCause)
              buildUser    = "upstream job"
              SlackMessage = "Deploying ${HelmChartName} (${DeployUseCases}) to ${Cluster} on GCP ${GoogleProjectName}.\n" +triggeredBy?.shortDescription
            } else {
              buildUser    = env.BUILD_USER
              SlackMessage = "${buildUser} is deploying ${HelmChartName} (${DeployUseCases}) to ${Cluster} on GCP ${GoogleProjectName}"
            }
          }
          slackSend channel: "${SlackChannel}", color: "#42AB09", message: "${SlackMessage}.\n\nJob '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\n(${env.BUILD_URL})\nTag: ${DockerImageTag}"
          deployment.deployApplication(GoogleProjectName, Cluster, HelmChartName, HelmChartVersion, HelmRepository, DeployUseCases, DockerImageName, DockerImageTag, RecreatePods)
        }
      }
      post {
        success {
          slackSend channel: "${SlackChannel}", color: "#42AB09", message: "${HelmChartName} (${DeployUseCases}) deployed on ${Cluster} on GCP ${GoogleProjectName} by ${buildUser}\n\nJob '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\n(${env.BUILD_URL})"
        }
        failure {
          slackSend channel: "${SlackChannel}", color: "#FF0000", message: "Deployment of ${HelmChartName} (${DeployUseCases}) on ${Cluster} on GCP ${GoogleProjectName} by ${buildUser} failed\n\nJob '${env.JOB_NAME} [${env.BUILD_NUMBER}]'\n(${env.BUILD_URL})"
        }
      }
    }
  }
}
