// Jenkinsfile autogenerated from the template.
// WARNING: Do not edit this file manually, all the changes will be
//          overwritten by automation.

pipeline {
    options {
        ansiColor('xterm')
    }

    environment {
        registrySchema = 'https://'
        registryHost = 'eu.gcr.io'
        registryName = 'dhh-search-discovery-ops/test-repo-creation-terraform1'
        codacyTokenName = 'disco-availability_codacy_token'
        deploymentTag = ''
        dockerImage = ''

        // Delivery env vars
        helmChartName = 'test-repo-creation-terraform1'
        deployJob = '/Reco Deployments/test-repo-creation-terraform1'
    }

    agent any
    tools {
        gradle 'gradle 6.0'
        jdk 'jdk 12'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-reco-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'gradle clean build -PGITHUB_TOKEN=${GITHUB_TOKEN} --info'
                    }
                }
            }
        }
        stage('Tests') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-reco-token', variable: 'GITHUB_TOKEN')]) {
                        sh 'gradle check -PGITHUB_TOKEN=${GITHUB_TOKEN}'
                    }
                }
            }
        }
        stage('SonarQube Tag Analysis') {
            when {
                tag "*"
            }
            steps {
                script {
                    lastTag = sh(returnStdout: true, script: "git tag --sort version:refname | tail -1").trim()
                    withCredentials([string(credentialsId: 'github-reco-token', variable: 'GITHUB_TOKEN')]) {
                        sh "gradle sonarqube -Dsonar.projectVersion=${lastTag} -PGITHUB_TOKEN=${GITHUB_TOKEN}"
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'github-reco-token', variable: 'GITHUB_TOKEN')]) {
                        docker.withRegistry("${registrySchema}${registryHost}", 'gcr:dhh-search-discovery-ops') {
                            dockerImage = docker.build("${registryName}:${env.BUILD_ID}", "--build-arg GITHUB_TOKEN=${GITHUB_TOKEN} .")
                        }
                    }
                }
            }
        }
        stage('Push Tag') {
            when {
                tag "*"
            }
            steps {
                script {
                    deploymentTag = sh(returnStdout: true, script: "git tag --sort version:refname | tail -1").trim()
                    docker.withRegistry("${registrySchema}${registryHost}", 'gcr:dhh-search-discovery-ops') {
                        dockerImage.push(deploymentTag)
                    }
                }
            }
        }
        stage('Push Image for PR') {
            when {
                changeRequest()
            }
            steps {
                script {
                    deploymentTag = sh(returnStdout: true, script: "{ echo -n ${env.BRANCH_NAME}-; echo -n `git rev-parse --short HEAD`; }").trim()
                    docker.withRegistry("${registrySchema}${registryHost}", 'gcr:dhh-search-discovery-ops') {
                        dockerImage.push(deploymentTag)
                    }
                }
            }
        }
        stage('Push main') {
            when {
                branch 'main'
            }
            steps {
                script {
                    deploymentTag = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%H'").trim()
                    docker.withRegistry("${registrySchema}${registryHost}", 'gcr:dhh-search-discovery-ops') {
                        dockerImage.push(deploymentTag)
                    }
                }
            }
        }
        stage('Deploy STG') {
            when {
                anyOf {
                    tag "*"
                    branch 'main'
                }
            }
            steps {
                script {
                    build job: "${deployJob}/main",
                    parameters: [
                        string(name: 'stgImageTag', value: "${deploymentTag}"),
                        string(name: 'ENVIRONMENT', value: "stg")
                    ],
                    wait: false
                }
            }
        }
    }
}
